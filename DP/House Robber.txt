'''
You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.

Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.

Input: nums = [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).
Total amount you can rob = 1 + 3 = 4.
'''

class Solution {
    // private int[] dp;   
    // public int solve(int[] nums, int i){
        // int dp[] = new int[nums.length+1];

        // if(i>=nums.length) return 0;

        // if(dp[i] != -1){
        //     return dp[i];
        // }

        // int steal = nums[i] + solve(nums,i+2);
        // int skip = solve(nums,i+1);

        // return dp[i] = Math.max(steal,skip);
        
    // }
    public int rob(int[] nums) {
        int n = nums.length;

        int dp[] = new int[n+1];

        dp[0] = 0;
        dp[1] = nums[0];

        for(int i = 2;i<=n;i++){
            int steal = nums[i-1] + dp[i-2];
            int skip = dp[i-1];

            dp[i] = Math.max(steal,skip);
        }

        return dp[n];

        
// dp = new int[n]; // Initialize dp array
//         for (int j = 0; j < n; j++) {
//             dp[j] = -1; // Fill the dp array with -1 to indicate uncomputed states
//         }
//         return solve(nums,0);
    }
}