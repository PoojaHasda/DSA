'''
Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Explanation: 
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0.
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0.
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0.
The distinct triplets are [-1,0,1] and [-1,-1,2].
Notice that the order of the output and the order of the triplets does not matter.
'''

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> result = new ArrayList<>();
        
        if(nums.length < 3) return result;
        
        Arrays.sort(nums);
        for (int i = 0; i < nums.length - 2; i++) { // `nums.length - 2` to prevent out of bounds
            if (i > 0 && nums[i] == nums[i - 1]) {
                continue; // Skip duplicates for `n1`
            }
             int n1 = nums[i];
             twoSum(i + 1, nums, -n1, n1, result);
        }
        
         return result; 
    }

    public void twoSum(int i, int[] num, int target, int n1, List<List<Integer>> result){
        
        int j = num.length-1;

        while(i<j){

            if((num[i] + num[j]) == target) {
                result.add(Arrays.asList(n1, num[i], num[j]));

                i++;
                j--;

                // Skip duplicates for `i` and `j`
                while (i < j && num[i] == num[i - 1]) i++;
                while (i < j && num[j] == num[j + 1]) j--;
            }

            else if(num[i]+num[j] > target){
                j--;
            }else{
                i++;
            }

          
            
            
        }


    }
}